{"version":3,"file":"static/js/3.3442d941.chunk.js","mappings":"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","sources":["common/Lotties/index.tsx","components/ContentBlockLotties/styles.ts","components/ContentBlockLotties/index.tsx"],"sourcesContent":["import { LotiesProps } from \"../types\";\r\nimport { DotLottieReact } from '@lottiefiles/dotlottie-react';  \r\n\r\nexport const MyLotties = ({ src, width, height }: LotiesProps) => (\r\n\r\n  <DotLottieReact\r\n      width={width} height={height}\r\n      src= {`/lotties/${src}`}\r\n      loop\r\n      autoplay\r\n    />\r\n);\r\n","import { Row } from \"antd\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const ContentSection = styled(\"section\")`\r\n  position: relative;\r\n  padding: 10rem 0 8rem;\r\n\r\n  @media only screen and (max-width: 1024px) {\r\n    padding: 4rem 0 4rem;\r\n  }\r\n`;\r\n\r\nexport const Content = styled(\"p\")`\r\n  margin: 1.5rem 0 2rem 0;\r\n`;\r\n\r\nexport const StyledRow = styled(Row)`\r\n  flex-direction: ${({ direction }: { direction: string }) =>\r\n    direction === \"left\" ? \"row\" : \"row-reverse\"};\r\n`;\r\n\r\nexport const ContentWrapper = styled(\"div\")`\r\n  position: relative;\r\n  max-width: 540px;\r\n\r\n  @media only screen and (max-width: 575px) {\r\n    padding-top: 4rem;\r\n  }\r\n`;\r\n\r\nexport const ServiceWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n`;\r\n\r\nexport const MinTitle = styled(\"h6\")`\r\n  font-size: 15px;\r\n  line-height: 1rem;\r\n  padding: 0.5rem 0;\r\n  text-transform: uppercase;\r\n  color: #000;\r\n  font-family: \"Motiva Sans Light\", sans-serif;\r\n`;\r\n\r\nexport const MinPara = styled(\"p\")`\r\n  font-size: 13px;\r\n`;\r\n\r\nexport const ButtonWrapper = styled(\"div\")`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: 1024px) {\r\n    max-width: 80%;\r\n  }\r\n\r\n  button:last-child {\r\n    margin-left: 20px;\r\n  }\r\n`;\r\n","import { Row, Col } from \"antd\";\r\nimport { Fade } from \"react-awesome-reveal\";\r\nimport { withTranslation } from \"react-i18next\";\r\n\r\nimport { ContentBlockProps } from \"./types\";\r\nimport { Button } from \"../../common/Button\";\r\nimport { SvgIcon } from \"../../common/SvgIcon\";\r\nimport { MyLotties } from \"../../common/Lotties\"\r\n\r\nimport {\r\n  ContentSection,\r\n  Content,\r\n  ContentWrapper,\r\n  ServiceWrapper,\r\n  MinTitle,\r\n  MinPara,\r\n  StyledRow,\r\n  ButtonWrapper,\r\n} from \"./styles\";\r\n\r\nconst ContentBlock = ({\r\n  icon,\r\n  title,\r\n  content,\r\n  section,\r\n  button,\r\n  t,\r\n  id,\r\n  direction,\r\n}: ContentBlockProps) => {\r\n  const scrollTo = (id: string) => {\r\n    const element = document.getElementById(id) as HTMLDivElement;\r\n    element.scrollIntoView({\r\n      behavior: \"smooth\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ContentSection>\r\n      <Fade direction={direction} triggerOnce>\r\n        <StyledRow\r\n          justify=\"space-between\"\r\n          align=\"middle\"\r\n          id={id}\r\n          direction={direction}\r\n        >\r\n          <Col lg={11} md={11} sm={12} xs={24}>\r\n            <MyLotties src={icon} width=\"80%\" height=\"80%\"  />\r\n            {/* <SvgIcon src={icon} width=\"80%\" height=\"80%\" /> */}\r\n          </Col>\r\n          <Col lg={11} md={11} sm={11} xs={24}>\r\n            <ContentWrapper>\r\n              <h6>{t(title)}</h6>\r\n              <Content>{t(content)}</Content>\r\n              {direction === \"right\" ? (\r\n                <>\r\n                <ButtonWrapper>\r\n                  {typeof button === \"object\" &&\r\n                    button.map(\r\n                      (\r\n                        item: {\r\n                          color?: string;\r\n                          title: string;\r\n                        },\r\n                        id: number\r\n                      ) => {\r\n                        return (\r\n                          <Button\r\n                            key={id}\r\n                            color={item.color}\r\n                            onClick={() => scrollTo(\"about\")}\r\n                          >\r\n                            {t(item.title)}\r\n                          </Button>\r\n                        );\r\n                      }\r\n                    )}\r\n                </ButtonWrapper>\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                    {typeof section === \"object\" &&\r\n                      section.map(\r\n                        (\r\n                          item: {\r\n                            title: string;\r\n                            content: string;\r\n                            icon: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Col key={id} span={11}>\r\n                              <SvgIcon\r\n                                src={item.icon}\r\n                                width=\"60px\"\r\n                                height=\"60px\"\r\n                              />\r\n                              <MinTitle>{t(item.title)}</MinTitle>\r\n                              <MinPara>{t(item.content)}</MinPara>\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n                </>\r\n                \r\n                \r\n              ) : (\r\n                <ServiceWrapper>\r\n                  <Row justify=\"space-between\">\r\n                    {typeof section === \"object\" &&\r\n                      section.map(\r\n                        (\r\n                          item: {\r\n                            title: string;\r\n                            content: string;\r\n                            icon: string;\r\n                          },\r\n                          id: number\r\n                        ) => {\r\n                          return (\r\n                            <Col key={id} span={11}>\r\n                              <SvgIcon\r\n                                src={item.icon}\r\n                                width=\"60px\"\r\n                                height=\"60px\"\r\n                              />\r\n                              <MinTitle>{t(item.title)}</MinTitle>\r\n                              <MinPara>{t(item.content)}</MinPara>\r\n                            </Col>\r\n                          );\r\n                        }\r\n                      )}\r\n                  </Row>\r\n                </ServiceWrapper>\r\n              )}\r\n            </ContentWrapper>\r\n          </Col>\r\n        </StyledRow>\r\n      </Fade>\r\n    </ContentSection>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ContentBlock);\r\n"],"names":["MyLotties","_ref","src","width","height","_jsx","DotLottieReact","loop","autoplay","ContentSection","styled","Content","StyledRow","Row","direction","ContentWrapper","ServiceWrapper","MinTitle","MinPara","ButtonWrapper","withTranslation","icon","title","content","section","button","t","id","children","Fade","triggerOnce","_jsxs","justify","align","Col","lg","md","sm","xs","_Fragment","map","item","Button","color","onClick","document","getElementById","scrollIntoView","behavior","scrollTo","span","SvgIcon"],"sourceRoot":""}